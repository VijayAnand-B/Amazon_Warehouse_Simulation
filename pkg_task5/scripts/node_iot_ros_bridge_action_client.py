#!/usr/bin/env python
import rospy
import actionlib


# Message Class that is used by ROS Actions internally
from pkg_ros_iot_bridge.msg import msgRosIotAction

# Message Class that is used for Goal messages
from pkg_ros_iot_bridge.msg import msgRosIotGoal

# Message Class that is used for Result Messages
from pkg_ros_iot_bridge.msg import msgRosIotResult


# ROS Node - Action Client - ROS IoT Bridge
class RosIotBridgeActionClient:

    # Constructor
    def __init__(self):

        # Initialize Action Client
        self._ac = actionlib.ActionClient("/action_ros_iot", msgRosIotAction)

        # Dictionary to Store all the goal handels
        self._goal_handles = {}

        self._ac.flag = 0

        # Wait for Action Server that will use the action - '/action_ros_iot' to start
        self._ac.wait_for_server()
        rospy.loginfo("Action server up, we can send goals.")

    # This function will be called when there is a change of state in the Action Client State Machine

    def on_transition(self, goal_handle):

        # from on_goal() to on_transition(). goal_handle generated by send_goal() is used here.

        result = msgRosIotResult()

        index = 0
        for i in self._goal_handles:
            if self._goal_handles[i] == goal_handle:
                index = i
                break

        rospy.loginfo(
            "Transition Callback. Client Goal Handle #: " + str(index)
        )
        rospy.loginfo("Comm. State: " + str(goal_handle.get_comm_state()))
        rospy.loginfo("Goal Status: " + str(goal_handle.get_goal_status()))

        # Comm State - Monitors the State Machine of the Client which is different from Server's
        # Comm State = 2 -> Active
        # Comm State = 3 -> Wating for Result
        # Comm State = 7 -> Done

        # if (Comm State == ACTIVE)
        if goal_handle.get_comm_state() == 2:
            rospy.loginfo(str(index) + ": Goal just went active.")

        # if (Comm State == DONE)
        if goal_handle.get_comm_state() == 7:
            rospy.loginfo(str(index) + ": Goal is DONE")
            rospy.loginfo(goal_handle.get_terminal_state())

            # get_result() gets the result produced by the Action Server
            result = goal_handle.get_result()
            rospy.loginfo(result.flag_success)

            if result.flag_success == True:
                rospy.loginfo(
                    "Goal successfully completed. Client Goal Handle #: "
                    + str(index)
                )
            else:
                rospy.loginfo(
                    "Goal failed. Client Goal Handle #: " + str(index)
                )

    # This function is used to send Goals to Action Server

    def send_goal(self, arg_message):
        # Create a Goal Message object
        goal = msgRosIotGoal()
        goal.message = str(arg_message)

        rospy.loginfo("Send goal.")

        # self.on_transition - It is a function pointer to a function which will be called when
        #                       there is a change of state in the Action Client State Machine
        goal_handle = self._ac.send_goal(goal, self.on_transition, None)

        return goal_handle


# Main


def main():
    # Initialize ROS Node
    rospy.init_node("node_iot_ros_bridge_action_client")

    rospy.spin()


if __name__ == "__main__":
    main()
